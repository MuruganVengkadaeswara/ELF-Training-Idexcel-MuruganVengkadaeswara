 HTML
 CSS
 Javascript

 Javascript --> Scripting Language,
                Dynamic
                Validate at the frontend
                runs on client side (Browser)
        
        Javascript is case sensitive.

NetScape --> Brendon Eich 1995
             
             Mocha ---> Live Script ---> Javascript

             Java           Javascript
             
             car            carpet   

    ECMA --> European Computers Manufacturer's Association

        ECMA maintains the standards for Scripting Languages  

    Javascript's name is changed to ECMA Script 
    
    ES1 1997
    
    ES7 2017

    JS documentation --> Mozilla Developers maintains

Advantages of Javascript:
-------------------------

    1.Less server interaction.
    
    2.Better performance.

    3.Rich in Interface.

    4.more interactive


Compiler Characteristics:
-------------------------

    -> Spends lot of time analysing and processing
       the program.
    -> the resulting executable is some form of 
       machine-specific binary code.
    -> the computer hardware interprets(executes)
       the resulting code.
    -> Program execution is fast.

interpreter Characteristics:
----------------------------

    -> relatively little time is spent analysing and 
        processing the program
    -> the resulting code is some sort of intermediate
        code
    -> the resulting code is interpreted by another 
        program
    -> program execution is relatively slow


Javascript Engine:
==================

    Chrome             --> V8
    firefox,NetScape   --> SpiderMonkey
    Mozilla            --> Rhino
    IE/Edge            --> Chakra
    safari             --> JSCore
    Opera              --> V8  -> carakan



    V8  -- GOOGLE's

    -> Multi Threaded program written in c++
    -> Converts to binary code
    -> 

    Fullcodegen --> It consumes entire JS code and 
                    compiles just before Execution.
                    Just-In-Time compiler

                     a simple and very fast compiler 
                     that produced simple and relatively
                     slow machine code.

    crankshaft  --> monitors the code being compiled
                    for hot segment

                    a more complex (Just-In-Time) optimizing 
                    compiler that produced highly-optimized code.

    (hot segment is the code which gets more hits
        E.g for loop)

    main thread     --> fetch--> compiles--> execute
    compiler thread --> fullcodegen && crankshaft
    profiler thread --> it monitors the code
    GC thread       --> Garbage collector

    ways to add Javascript:
    ------------------------

     There are three ways

        1.Inline
        2.Internal/Embedded
        3.External


bag         --> books
container       content

|||y

variable    --> data
container      content

var identifier/var_name;

var is the keyword (see also let .., const)

var_name = value;

DataType --> It defines the type of data

1. Identifier must begin with a-z (or) A-Z (or) _ (or) $
2. it can contain numbers(Alpha Numeric)
3. it is case sensitive.
    (i.e  x is different from X)

 some valid var_names:
    _name12
    $abc
    num123

 some invalid var_names:
    123ac
    %2as
    num!s

DataTypes in Javascript:
========================

 There are 2 main DataTypes
    
    1.primitive
        
        * number
        * string
        * null
        * boolean
        * undefined

    2.Reference/Non primitive

        * Array
        * Object
        * Date
        * Math
        * Functions

    var Identifier = value;

    ; is not mandatory --> ask why?

    String is given inside:

        "" , '' , ``

        ``(Bad ticks)

        E.g

        var name = 'abc';
        var name = "abc";
        var name = `abc`;

    Null can be initialised using null keyword.

        E.g var name = null;

    boolean value is given using true and false. 

        E.g var value = true;

    undefined ---> no definition only declaration.

        var name;

Array
======

    1. Array is a collection of data
    2. it can be homogeneous / heterogeneous in js.

    Array can be declared by in two ways:

        1. by using []
        --------------
        syntax:
            var array_name = [values seperated by ,]
        E.g
         var array_name = [1,2,3,4,5];

        2. by using new keyword
        ------------------------
        syntax:
            var array_name = new Array(values);
        E.g 
         var array_name = new Array(10,20,30);


    to have empty value in array

        1. we can skip assigning the index 
           
        2. we can skip assigning the index by 
           using comma  i.e [1,,2,3] 

        3. we can have some key in the place 
           of an index

           arr['name']='mv'

           this is not included in the length
           but can accessed by key 


            

             
xxxxxxx   IMPORTANT POINTS  xxxxxxx


    we can have array inside array.
    (see Multi Dimensional array)

    we can have array inside object.

    we can have object inside array.

Why array index starts with 0 not 1?

    a[n] be an array

    n should not be treated as an index, 
    but as an offset from the array's head.


Object
=======

    Object is an entity which has 
        * states
        * behaviors

    E.g

        Book 

            states   - no_of_pages,Weight,title
            behavior - show(),throw()

    syntax:
    ======

     var obj_name = {
        
        key:value,
        key1:value1,

     }


    var student = {
        id:1,
        name:'abc',
        city:'BLR'
    }



    statement
    ----------
      
      A statement is an instruction/line of code
      that yields some result.

      operands 
      ========

        there are 2 types of operands

            1.variables
            2.literals
        
        An operand is something on which an operation is made

    
xxxxxxx   IMPORTANT POINTS  xxxxxxx


    we can have array inside array.
    (see Multi Dimensional array)

    we can have array inside object.

    we can have object inside array.

Why array index starts with 0 not 1?

    a[n] be an array

    n should not be treated as an index, 
    but as an offset from the array's head.

      operators
      =========

            it has some specific functionality

            1. Arithmetic   
            2. Comparision/relational
            3. logical
            4. ternary
            5. typeof

        uses of the console
        ===================

        1.logging purpose
        2.can check the errors
        3.run the js code



Arithmetic operators:
=====================

    + , - , * , / , % , ++ , --

        the usual.

    pre-increment / post-increment (also see)

    pre-increment          
    -------------
    1. the value gets     
       incremented
    2. substitute the 
       value
    3. operation 

    post-increment
    --------------
    1. substitute the 
       value
    2. operation
    3. increment

Comparision/relational
======================

    ==
    !=
    >
    <
    >=
    <=
    ===
    !==

    === and !== are strictly equals and strictly not equals
    it also checks for the DataType along with data

logical
=======

    and  
    or
    not

ternary
=======

    condition ? trueStatement : falseStatement


    greatest of 3 numbers using ternary operators

        (a>b)?((a>c)?a:c):((b>c)?b:c);

typeof
======

    it returns the typeof data

    number --> number
    String --> String
    boolean --> boolean
    Null   ---> Object  #### NOTE
    undefined --> undefined

    Array --> Object
    Object --> Object

    to check if array is array (to return boolean)
    use isArray(array_name) method from Array class

        Array.isArray(myArray);

The template literal
====================

    to include a variable inside string

    ${var_name}

    can be used with `` (only)

    var a=10;
    console.log(`HEllo ${a}`)

Functions
=========

    Set of code to performance/Instruction to perform
    a dedicated task.

 Types:
=======
    1. Named Functions
    2. Function Expression /Anonymous function
    3. IIFE (Immediately invoked Function Expression)
    4. ES6 arrow function

1.Named Function:

    syntax:

        function function_name(Args){

            return value; //optional
        }

2.Function Expression:

    syntax:

        var someVar = function (args) { 

        };

        someVar();

3.IIFE :

    syntax:

        (function(params){
            //statement

        })(params)  //dont give semi colon here

4. Arrow Function:

    syntax:

       var myVar = () => {
           //statement
       }

        NOTE:

            if there is only one param or argument
            we can omit () in arrow function

            if there is only one statement inside the
            function we can omit {} in arrow function


       => --> called fat arrow


input args ==> all primitive DataTypes
               Array
               Object
               function  

return type ==> all primitive DataTypes
               Array
               Object
               function  
               can't return multiple values


    Static typing
    -------------

        e.g --> Java

        the DataType is defined and must 
        be same as definition

        we cannot store different types
    
    Dynamic typing
    --------------

        e.g --> Javascript

        the DataType stored can be any

    NOTE: TypeScript supports static typing


Date 
=====

  there are four overloaded constructors

    1. new Date()
    2. new Date(year,month,day,hours,mins,secs,ms)
    3. new Date(ms)
    4. new Date(date String)

    "month day,year HH:MM:SS" --> date string format


    NOTE:

        month starts from 
         
         jan -- 0
         feb -- 1
         .
         . 
         .
         dec -- 11

        days

         sun - 0
         mon - 1
         .
         .
         .
         sat - 6

         secs , mins --> 0 to 59

         hours --> 0-23


    Date Object methods
    ====================

    getFullYear()    ---> get the year in YYYY format
    getMonth()       ---> get month as number (0-11)
    getDate()        ---> get Day as number (1-31)
    getHours()       ---> get the hour (0-23)
    getMinutes()     ---> get the minute (0-59)
    getSeconds()     ---> get the seconds (0-59)
    getMilliseconds()---> get the milliseconds (0-999)
    getTime()    |
                 |   ----> return milliseconds from jan 1 1970
    Date.now()   |

    Math object
    ===========

     math object has many useful functions for 
     basic mathematical operations


     control structures
     ==================

     control structures are used to control the flow of code.
     in other words it decides how the control is transfered.

     1.if

        syntax
        ------

            if(condition)
            {
                //statements
            }

            use if when you have one condition 
            to check and one block

    2.if else

        syntax
        ------

            if(condition){
                //if block statement
            }
            else
            {
                //else block statement
            }

    3.if else if

       syntax
       ------

           if(condition){
               //statement
           }
           else if(condition1){
               //statement
           }
           else if(condition2){
               //statement
           }
           else{
               //statement
           }

    4.switch

        syntax
        ------

            switch(value)
            {
                case 1: 
                    //statement
                    break;
                    
                case 2: 
                    //statement
                    break;
                case 3: 
                    //statement
                    break;
                default:
                    //statement
                    break;

            }

        //see also free flowing switch
        //usage of break 

    Loops
    =====

        1.while
        2.do while
        3.for
        4.for in
        5.for of
        6.forEach


    1.while

        syntax
        ------

            while(condition)
            {
                //statements
            }

            the statements are executes until the condition 
            is false.
            

    2.do while

        syntax
        ------

            do
            {
                //statements
            }while(condition)
    
    3.for

        syntax
        ------

            for(stmt1;stmt2;stmt3)
            {
                //code 
            }

            stmt1 : init phase
            stmt2 : condition
            stmt3 : update / counter ++,--

            1.it does not work with object
            2.it does not ignore empty
            3.break is supported
            4.ignores extra properties without index value

    4.for of    

        for of returns the value not index

        syntax
        ------

            var varname;

            for(varname for arrayname){
                //statement
            }

        1.it will not work with object
        2.it does not ignore empty value
        3.break is supported
        4.ignores the extra properties without index value

    5.for in    

        it returns index for array
        it returns key for object

        syntax
        ------

            var varname;

            for(varname in object/arrayname){
                //statement
            }

        1.it will work with object
        2.it ignores empty value
        3.break is supported
        4.it does not ignore the extra properties without index value



JSON
====
 Javascript Object Notation

 {
     'name' : 'value'
     'age'  : value
     'full-name' : value
 }

 XML
=====

 <person>
    <name>mv</name>
 </person>


 NOTE:
 ----

    1.  period (.) will work perfectly with proper Identifier in JSON

           i.e object.key  

    2.  insert debugger anywhere inside loop / block / code 
        to debug in the browser console