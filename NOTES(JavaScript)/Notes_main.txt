 HTML
 CSS
 Javascript

 Javascript --> Scripting Language,
                Dynamic
                Validate at the frontend
                runs on client side (Browser)
        
        Javascript is case sensitive.

NetScape --> Brendon Eich 1995
             
             Mocha ---> Live Script ---> Javascript

             Java           Javascript
             
             car            carpet   

    ECMA --> European Computers Manufacturer's Association

        ECMA maintains the standards for Scripting Languages  

    Javascript's name is changed to ECMA Script 
    
    ES1 1997
    
    ES7 2017

    JS documentation --> Mozilla Developers maintains

Advantages of Javascript:
-------------------------

    1.Less server interaction.
    
    2.Better performance.

    3.Rich in Interface.

    4.more interactive


Compiler Characteristics:
-------------------------

    -> Spends lot of time analysing and processing
       the program.
    -> the resulting executable is some form of 
       machine-specific binary code.
    -> the computer hardware interprets(executes)
       the resulting code.
    -> Program execution is fast.

interpreter Characteristics:
----------------------------

    -> relatively little time is spent analysing and 
        processing the program
    -> the resulting code is some sort of intermediate
        code
    -> the resulting code is interpreted by another 
        program
    -> program execution is relatively slow


Javascript Engine:
==================

    Chrome             --> V8
    firefox,NetScape   --> SpiderMonkey
    Mozilla            --> Rhino
    IE/Edge            --> Chakra
    safari             --> JSCore
    Opera              --> V8  -> carakan



    V8  -- GOOGLE's

    -> Multi Threaded program written in c++
    -> Converts to binary code
    -> 

    Fullcodegen --> It consumes entire JS code and 
                    compiles just before Execution.
                    Just-In-Time compiler

                     a simple and very fast compiler 
                     that produced simple and relatively
                     slow machine code.

    crankshaft  --> monitors the code being compiled
                    for hot segment

                    a more complex (Just-In-Time) optimizing 
                    compiler that produced highly-optimized code.

    (hot segment is the code which gets more hits
        E.g for loop)

    main thread     --> fetch--> compiles--> execute
    compiler thread --> fullcodegen && crankshaft
    profiler thread --> it monitors the code
    GC thread       --> Garbage collector

    ways to add Javascript:
    ------------------------

     There are three ways

        1.Inline
        2.Internal/Embedded
        3.External


bag         --> books
container       content

|||y

variable    --> data
container      content

var identifier/var_name;

var is the keyword (see also let .., const)

var_name = value;

DataType --> It defines the type of data

1. Identifier must begin with a-z (or) A-Z (or) _ (or) $
2. it can contain numbers(Alpha Numeric)
3. it is case sensitive.
    (i.e  x is different from X)

 some valid var_names:
    _name12
    $abc
    num123

 some invalid var_names:
    123ac
    %2as
    num!s

DataTypes in Javascript:
========================

 There are 2 main DataTypes
    
    1.primitive
        
        * number
        * string
        * null
        * boolean
        * undefined

    2.Reference/Non primitive

        * Array
        * Object
        * Date
        * Math
        * Functions

    var Identifier = value;

    ; is not mandatory --> ask why?

    String is given inside:

        "" , '' , ``

        ``(Bad ticks)

        E.g

        var name = 'abc';
        var name = "abc";
        var name = `abc`;

    Null can be initialised using null keyword.

        E.g var name = null;

    boolean value is given using true and false. 

        E.g var value = true;

    undefined ---> no definition only declaration.

        var name;

Array
======

    1. Array is a collection of data
    2. it can be homogeneous / heterogeneous in js.

    Array can be declared by in two ways:

        1. by using []
        --------------
        syntax:
            var array_name = [values seperated by ,]
        E.g
         var array_name = [1,2,3,4,5];

        2. by using new keyword
        ------------------------
        syntax:
            var array_name = new Array(values);
        E.g 
         var array_name = new Array(10,20,30);


    to have empty value in array

        1. we can skip assigning the index 
           
        2. we can skip assigning the index by 
           using comma  i.e [1,,2,3] 

        3. we can have some key in the place 
           of an index

           arr['name']='mv'

           this is not included in the length
           but can accessed by key 


            

             
xxxxxxx   IMPORTANT POINTS  xxxxxxx


    we can have array inside array.
    (see Multi Dimensional array)

    we can have array inside object.

    we can have object inside array.

Why array index starts with 0 not 1?

    a[n] be an array

    n should not be treated as an index, 
    but as an offset from the array's head.


Object
=======

    Object is an entity which has 
        * states
        * behaviors

    E.g

        Book 

            states   - no_of_pages,Weight,title
            behavior - show(),throw()

    syntax:
    ======

     var obj_name = {
        
        key:value,
        key1:value1,

     }


    var student = {
        id:1,
        name:'abc',
        city:'BLR'
    }



    statement
    ----------
      
      A statement is an instruction/line of code
      that yields some result.

      operands 
      ========

        there are 2 types of operands

            1.variables
            2.literals
        
        An operand is something on which an operation is made

    
xxxxxxx   IMPORTANT POINTS  xxxxxxx


    we can have array inside array.
    (see Multi Dimensional array)

    we can have array inside object.

    we can have object inside array.

Why array index starts with 0 not 1?

    a[n] be an array

    n should not be treated as an index, 
    but as an offset from the array's head.

      operators
      =========

            it has some specific functionality

            1. Arithmetic   
            2. Comparision/relational
            3. logical
            4. ternary
            5. typeof

        uses of the console
        ===================

        1.logging purpose
        2.can check the errors
        3.run the js code



Arithmetic operators:
=====================

    + , - , * , / , % , ++ , --

        the usual.

    pre-increment / post-increment (also see)

    pre-increment          
    -------------
    1. the value gets     
       incremented
    2. substitute the 
       value
    3. operation 

    post-increment
    --------------
    1. substitute the 
       value
    2. operation
    3. increment

Comparision/relational
======================

    ==
    !=
    >
    <
    >=
    <=
    ===
    !==

    === and !== are strictly equals and strictly not equals
    it also checks for the DataType along with data

logical
=======

    and  
    or
    not

ternary
=======

    condition ? trueStatement : falseStatement


    greatest of 3 numbers using ternary operators

        (a>b)?((a>c)?a:c):((b>c)?b:c);

typeof
======

    it returns the typeof data

    number --> number
    String --> String
    boolean --> boolean
    Null   ---> Object  #### NOTE
    undefined --> undefined

    Array --> Object
    Object --> Object

    to check if array is array (to return boolean)
    use isArray(array_name) method from Array class

        Array.isArray(myArray);

The template literal
====================

    to include a variable inside string

    ${var_name}

    can be used with `` (only)

    var a=10;
    console.log(`HEllo ${a}`)

Functions
=========

    Set of code to performance/Instruction to perform
    a dedicated task.

 Types:
=======
    1. Named Functions
    2. Function Expression /Anonymous function
    3. IIFE (Immediately invoked Function Expression)
    4. ES6 arrow function

1.Named Function:

    syntax:

        function function_name(Args){

            return value; //optional
        }

2.Function Expression:

    syntax:

        var someVar = function (args) { 

        };

        someVar();

3.IIFE :

    syntax:

        (function(params){
            //statement

        })(params)  //dont give semi colon here

4. Arrow Function:

    syntax:

       var myVar = () => {
           //statement
       }

        NOTE:

            if there is only one param or argument
            we can omit () in arrow function

            if there is only one statement inside the
            function we can omit {} in arrow function


       => --> called fat arrow


input args ==> all primitive DataTypes
               Array
               Object
               function  

return type ==> all primitive DataTypes
               Array
               Object
               function  
               can't return multiple values


    Static typing
    -------------

        e.g --> Java

        the DataType is defined and must 
        be same as definition

        we cannot store different types
    
    Dynamic typing
    --------------

        e.g --> Javascript

        the DataType stored can be any

    NOTE: TypeScript supports static typing


Date 
=====

  there are four overloaded constructors

    1. new Date()
    2. new Date(year,month,day,hours,mins,secs,ms)
    3. new Date(ms)
    4. new Date(date String)

    "month day,year HH:MM:SS" --> date string format


    NOTE:

        month starts from 
         
         jan -- 0
         feb -- 1
         .
         . 
         .
         dec -- 11

        days

         sun - 0
         mon - 1
         .
         .
         .
         sat - 6

         secs , mins --> 0 to 59

         hours --> 0-23


    Date Object methods
    ====================

    getFullYear()    ---> get the year in YYYY format
    getMonth()       ---> get month as number (0-11)
    getDate()        ---> get Day as number (1-31)
    getHours()       ---> get the hour (0-23)
    getMinutes()     ---> get the minute (0-59)
    getSeconds()     ---> get the seconds (0-59)
    getMilliseconds()---> get the milliseconds (0-999)
    getTime()    |
                 |   ----> return milliseconds from jan 1 1970
    Date.now()   |

    Math object
    ===========

     math object has many useful functions for 
     basic mathematical operations


     control structures
     ==================

     control structures are used to control the flow of code.
     in other words it decides how the control is transfered.

     1.if

        syntax
        ------

            if(condition)
            {
                //statements
            }

            use if when you have one condition 
            to check and one block

    2.if else

        syntax
        ------

            if(condition){
                //if block statement
            }
            else
            {
                //else block statement
            }

    3.if else if

       syntax
       ------

           if(condition){
               //statement
           }
           else if(condition1){
               //statement
           }
           else if(condition2){
               //statement
           }
           else{
               //statement
           }

    4.switch

        syntax
        ------

            switch(value)
            {
                case 1: 
                    //statement
                    break;
                    
                case 2: 
                    //statement
                    break;
                case 3: 
                    //statement
                    break;
                default:
                    //statement
                    break;

            }

        //see also free flowing switch
        //usage of break 

    Loops
    =====

        1.while
        2.do while
        3.for
        4.for in
        5.for of
        6.forEach


    1.while

        syntax
        ------

            while(condition)
            {
                //statements
            }

            the statements are executes until the condition 
            is false.
            

    2.do while

        syntax
        ------

            do
            {
                //statements
            }while(condition)
    
    3.for

        syntax
        ------

            for(stmt1;stmt2;stmt3)
            {
                //code 
            }

            stmt1 : init phase
            stmt2 : condition
            stmt3 : update / counter ++,--

            1.it does not work with object
            2.it does not ignore empty
            3.break is supported
            4.ignores extra properties without index value

    4.for of    

        for of returns the value not index

        syntax
        ------

            var varname;

            for(varname for arrayname){
                //statement
            }

        1.it will not work with object
        2.it does not ignore empty value
        3.break is supported
        4.ignores the extra properties without index value

    5.for in    

        it returns index for array
        it returns key for object

        syntax
        ------

            var varname;

            for(varname in object/arrayname){
                //statement
            }

        1.it will work with object
        2.it ignores empty value
        3.break is supported
        4.it does not ignore the extra properties without index value



JSON
====
 Javascript Object Notation

 {
     'name' : 'value'
     'age'  : value
     'full-name' : value
 }

 XML
=====

 <person>
    <name>mv</name>
 </person>


 NOTE:
 ----

    1.  period (.) will work perfectly with proper Identifier in JSON

           i.e object.key  

    2.  insert debugger anywhere inside loop / block / code 
        to debug in the browser console







Passing one function to another function --- > callBack Function


filter(callBack(value,index))
==============================

    arr = [1,2,3,4,5,6]

    array_name.filter(function(value,index){
        if(condition)
            return true;
        else
            return false;
    });

    true --> value will be removed
    false ---> value will not be removed

some array methods:
===================

  ->  indexOf(searchElement , fromIndex) --> number

  ->  push(items) -- its used to insert the value at 
                   last index
            
            items can be single / multiple values
            returns the number of elements 
 
  -> pop()  -- it removes the element at the last
               index element

    pop() and push()  --> for last index

    unshift(item) -- insert the value at first index

        item -- single / multiple values
        returns the number of element

    shift() -- removes the element from the first index

    join(seperator)  --> string

    splice(sat) 


VARIABLE HOISTING:
==================
	-> Moving the declaration at the top.
	-> It will move only the declaration and it will never moves initialization
	-> It is used to avoid bugs.

	TYPES:
	1. Global Variable Hoisting
	2. Local Variable Hoisting

CALL STACK:
===========
	1. It keeps the record of the functions that we called.
	2. It works similar to stack(LAST IN FIRST OUT).

STRING METHODS:
===============

	1. toLowerCase():
		converts string value to lower case.
	2. toUpperCase():
		converts string value to Upper case.
	3. charAt(position):
		returns the character at the specified index.
	4. indexOf(searchString,position):
		return the index of first occurence of that search string.
		-> If position is specified it starts checking from that specified index.
	5. concat(string1,string2,....string n):
		It will concate multiple string values into a single string.
	6. includes(start_indexstart ,position)
		It will chack if the value is present in the string or not
		-> It will return boolean value.
	7. replace(search value, replace value)
		-> It will replace an existing character with the newly specified character.
		-> If no replace value is passed then the search value is replaced with undefined.
		eg:- replace('m') -> 'm' will be replaced with undefined.
	8. subString(start,length):
		-> It will create a sub string for the original string value.
	9. trim():
		-> It will remove all the unwanted white spaces in the start of the string.

BROWSER OBJECT MODEL( BOM ):
============================
	Using BOM we can interact with the browser.

	Window(object):
		It will be present in all the browser.
		-> Every global variable are automatically becomes the properties of Window Object
		-> Every global methods are automatically becomes the functions of Window Object.
			
		Inbuild properties of Window object:
		1. innerHeight:
			Display height of the page(only content area)
		2. innerWidth:
			Display width of the page(only content area)

		Inbuild Methods of Window Objects:
		1. prompt():
			It is used to take the user input.
		2. alert():
			It is used to give some message or Notification.
		3. confirm():
			It returns either true or false.
			-> If you click on 'OK' then it returns true.
			-> If you click on 'CANCEL' then it returns false
		4. open():
			-> It It is used to open a new tab.
		5. close():
			-> close the current tab.
		6. console():
			-> We can call log() method using console Object
				eg:-
				console.clear() -> It will clear the console.

	History(Object):
    =================
		-> There are no properties.
		
		Methods:
		1. back():
			-> It is used to navigate from current page to previous page.
		2. forward():
			-> It is used to navigate from current page to Next page.

	URL:
    ====

		URL Pattern: 
			protocol://hostname:port/pathname
			
			Protocol -> It is the mediator between browser and server. This is not mandatory, as browser will provide internally.case INSENSITIVE.
					TYPES:
					1. HTTP -> It will not Encrypt the data. So it is not secured
					2. HTTPS -> It Encrypts the data. So, it is secured
			Hostname -> where our web pages are located. It can be IP address or Computer Name. It is mandatory. case INSENSITIVE
			Port number-> number where the server is located.It is not mandatory
			path name -> name of the path.not mandatory. case SENSITIVE.

	Location(Object):
    =================

		-> It helps us to get Hostname,port number, path name,etc.
		-> It has no methods.

		PROPERTIES OF LOCATION OBJECT:
        ===============================
		1. location.href -> It will provide the complete url of a page.
		2. location.protocol -> It will provide the protocol of a page.
		3. location.hostname -> It will provide the hostname of a page.
		4. location.port -> It will provide the port number of a page.
		5. location.pathname -> It will provide the path name of a page.
		

DOCUMENT OBJECT MODEL:
======================

		- It is an programming interface for HTML and XML, which can be modified using Scripting language(JS).
		- It doesn't affect Original HTML code.
		- Browser provides DOM.


	- Everything is Node in DOM.
	NODE -> Node can be an Object,element, etc,...

	1. Entire HTML page is converted into DOM and will be displayed in the browser.
	2. What we see in a browser is based on DOM.
	
	W3C standard:
	- It is platform & language neural interface.

	Three Types of DOM:
	1. Core DOM - for all type of document
	2. XML DOM - for XML document.
	3. HTML DOM - for HTML document.

	HTML DOM:
    =========
	- Using this HTML DOM , JavaScript gets all the power to make our web pages Dynamic.
	
		Functions:
		1. We can change the HTML elements in pages.
		2. We can change the attributes of elements in pages.
		3. We can add CSS Styles.
		4. We can remove the existing Attributs/Elements.
		5. We can add new Attributes/Elements.
		6. We can create/react events.
		
		DOM TREE:
        ==========
		1. Always 'Document' should be the root element of all elements.

					Document

				       Document Type
		
					 HTML

			Head				Body
			
			Title				p	h2	script

			#Content		    #Content #Content  #Conten




Can we create multiple elements using createElement()?
    
    Not Possible

    var element = document.createElement(tagName[, options]);

    it returns new element

EVENT:It is an Action like 
		-> Hover, click, submit,...
	EventListener: It will tell that there is an action and somebody needs to handle it.
			-> Attribute is the EventListener in JS.
			-> Attributes are onClick, onSubmit, onMouseHover.
	EventHandler: It handles the action. 
			-> Function is the EventHandler in JS.

	innerText:
		-> It will only returns the content.		
		-> Retrieves the data and set content of tag as a plain text.
	innerHTML::
		-> It returns the entire element.
		-> It retrieves the data and set content as HTML format.
	
	DOM METHODS:

	1. write() -> The content inside the write method will be displyed inside the html page.
		   -> It will be loaded, once after the entire html page is loaded and it will delete other existing html elements and it will add new content.
		NOTE:
		1. we can pass objects, variables, tags etc,...

	2. open() -> It opens the output stream to write.
	3. close() -> It will close the output stream to write.
	4. writeln() -> It is similar to java println() method.
		     -> We have to use pre tag inorder to use writeln().
	5. createElement(element):
		ex -> document.createElement('h1')
		   -> we can create an specified element by using createElement 
		   -> element -> tagName
		   -> return -> 

	CHANGE THE CONTENT:

	6. getElementById(id name):
		-> returns the only element with the specified id.
	7. gatElementByTagName(tag_name):
		-> It will collect all the tags with specified tag name and it will create HTML collection object.
		-> Return Type = HTML Object with only specified Tag Name.
		-> We can iterate through for in method.
		

	8. getElementByClassName(class_name):
		Return Type = HTML Object having all the tags with same class name as specified

	9. getElementByName(name):
		-> return Type = NodeList Object.

		ex:
			var x=document.getElementsByName('simple');
			for(var key in x)
			{
				x[key].style.color='blue';
			}
		
	CHANGE THE STYLES:

	10. querySelector(tag or id or class):
		-> We use querySelector inorder to change the styles.
		-> It will return the very first element with the specified tag/classname/id.
	11. querySelectorAll(tag or id or class):
		-> It will return all the tags with specified TagName/className.

	
	APPEND:

	12. appendChild();
		-> it will add new element to page.

	13. insertBefore(newchild, existing child location)
		-> It will add new element at the sepecified location.
		Example:
			insertBefore(x, document.body.chileNodes[location starts from 0 to end]. (OR) insertBefore(x, ul.childNaodes[5]);

		Properties:
		1. firstchild
		2. firstElementChild
		3. lastElementChild

	REMOVE:

	14. remove():
		-> Remove all the content/clears the current page.
		-> Is good to not use this remove() method.

	15. removeChild():
		-> It is used to remove the child of an Element. EX-> Remove a list child from Unordered List.

		var x=dicument.getElementById('val'); ------> getting ul element
		x.removeChild(x.lastElementChild.PreviousElementSibling);

	REMOVE PARTICULAR ELEMENT:
	1. Get that patricular element.
		var X=document.getElementById("demo");
		x.removeChild(x.lastElementChild.PreviousElementSibling);
	
	ADD CSS USING NEW CLASS NAME:

		CLASSNAME PROPERTY:
			document.getElementById("demo").className="new class name";	
		CLASSLIST PROPERTY:
			document.getElementById("demo").classList.add('new class name');
	REMOVE CSS:
		
		CLASSNAME PROPERTY:
			document.getElementById("demo").className=" ";	
		CLASSLIST PROPERTY:
			document.getElementById("demo").classList.remove('new class name');

	GETTING FORM DATA USING FORM NAME:
		var form = document.forms["form_name"];
		var use = form["name of input element/id of input element"];

		eg:
		var form = document.forms["MyForm"];
		var use = form["user"].value;

FORM VALIDATION:

	1. addEventListener():

		1. It will add some event.

		document.addEventListener(event, function, oncapture)

		Event:
			1. Events such as onClick,onmouseover,onsubmit,....
			2. It should be included in string format.
			3. Prefix word 'on' should be removed. for example for onclick event,it should be specified as 'click'.
		Function:
			1. Function name should be included without paranthesis....
			2. It is the event handler performs the event.

		eg:-
			Element.addEventListener("mouseover",overFunction);

	2. removeEventListener():
		
		document.removeEventListener(event, function);

		1. It will remove that particular event.
		
		eg:-
			Element.removeEventListener("mouseover",overFunction);
      